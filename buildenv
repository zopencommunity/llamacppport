export ZOPEN_BUILD_LINE="DEV"
export ZOPEN_STABLE_DEPS="zoslib make cmake curl"
export ZOPEN_DEV_URL="https://github.com/ggerganov/llama.cpp.git"
export ZOPEN_DEV_DEPS="zoslib make cmake curl openssl libssh2 zlib libpsl"
export ZOPEN_CATEGORIES="ai"
export ZOPEN_DEV_TAG="b6027"
export ZOPEN_NAME="llamacpp-master"
export ZOPEN_RUNTIME_DEPS="ncurses"

# export ZOPEN_SKIP_ZOSLIB_ENV_HOOK=1

rm -f "llama"
ln -s "llama.cpp" "llama"
ln -s "llama.cpp" $ZOPEN_NAME

export ZOPEN_COMP="CLANG"
# set env variables
# export CURL_HOME="/data/zopen/usr/local/zopen/curl/curl"
export BLAS_HOME="/usr/lpp/cbclib"

export ZOPEN_CONFIGURE="cmake"
export ZOPEN_CONFIGURE_OPTS="-B ../build --install-prefix \"\$ZOPEN_INSTALL_DIR/\" -DCMAKE_C_FLAGS=\"-fzvector -m64 -march=z15 -lmass.arch13\" -DCMAKE_C_STANDARD=11 -DCMAKE_C_STANDARD_REQUIRED=ON -DCMAKE_C_EXTENSIONS=OFF -DCMAKE_BUILD_TYPE=Release -DLLAMA_SERVER_SSL=ON -DOPENSSL_ROOT_DIR=\$OPENSSL_HOME -DCURL_LIBRARY=\$CURL_HOME/lib/libcurl.a -DCURL_INCLUDE_DIR=\$CURL_HOME/include -DBUILD_SHARED_LIBS_DEFAULT=OFF -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON -DGGML_BACKEND_DL=OFF -DGGML_OPENBLAS=ON -DGGML_BLAS_VENDOR=OpenBLAS -DBLAS_INCLUDE_DIRS=/usr/lpp/cbclib/include/openblas -DBLAS_LIBRARIES=/usr/lpp/cbclib/lib/libopenblas.so -DLLAMA_BUILD_TESTS=ON -DLLAMA_CURL=ON ."

export ZOPEN_MAKE="cmake"
export ZOPEN_MAKE_OPTS="--build ../build --parallel \$ZOPEN_NUM_JOBS --config Release"
export ZOPEN_MAKE_MINIMAL=Y

export ZOPEN_INSTALL="cmake"
export ZOPEN_INSTALL_OPTS="--install ../build"

export ZOPEN_CHECK="ctest"
export ZOPEN_CHECK_OPTS="--test-dir ../build  --output-on-failure"

# if false; then
#  export ZOPEN_EXTRA_CPPFLAGS="-DGGML_USE_OPENBLAS -I /home/itodoro/projects/openblas/openblas/include/openblas -mvx -mzvector -march=z15"
#  export ZOPEN_EXTRA_LIBS="/home/itodoro/projects/openblas/openblas/libopenblas.x"
# fi

zopen_check_results()
{
  dir="$1"
  pfx="$2"
  chk="$1/$2_check.log"
  
  if [[ -f "$chk" ]]; then
    total=$(grep -cE "Test +#" "$chk")
    failed=$(grep -cE "\*\*\*Failed|Subprocess aborted\*\*\*" "$chk")
    skipped=$(grep -c "Skipped" "$chk")
    passed=$((total - failed - skipped))
  else
    total=0
    passed=0
    failed=0
    skipped=0
  fi

  # Echo the following information to gauge build health
  echo "actualFailures:$failed"
  echo "actualPassed:$passed"
  echo "actualSkipped:$skipped"
  echo "totalTests:$total"
  echo "expectedFailures:3"
  echo "expectedTotalTests:$total"
}

zopen_pre_check()
{
# unset SSL_CERT_FILE
unset SSL_CERT_PATH
export SSL_CERT_PATH=$(curl-config --ca)
export CFLAGS="$CFLAGS -march=z15 -mzvector"
export CPPFLAGS="$CPPFLAGS -march=z15"
}

# zopen_append_to_env()
# {
#  export SSL_CERT_PATH=$(curl-config --ca)
#  # echo envars outside of PATH, MANPATH, LIBPATH
# }

# zopen_append_to_zoslib_env()
# {
#  cat<<EOF
#  SSL_CERT_PATH|set|$(curl-config --ca)
#  EOF
# }

zopen_append_to_setup()
{
  # echo commands that will run when installing via setup.sh
}

zopen_get_version()
{
  # Modify to echo the version of your tool/library
  # Rather than hardcoding the version, obtain the version by running the tool/library
  echo "1.0.0"
}
