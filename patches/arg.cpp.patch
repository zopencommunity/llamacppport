diff --git a/common/arg.cpp b/common/arg.cpp
index 06005359..28220aac 100644
--- a/common/arg.cpp
+++ b/common/arg.cpp
@@ -36,6 +36,9 @@
 #include <curl/curl.h>
 #include <curl/easy.h>
 #include <future>
+#   ifdef __MVS__
+#   include <cstdlib>
+#   endif
 #endif
 
 using json = nlohmann::ordered_json;
@@ -195,6 +198,8 @@ bool common_has_curl() {
 #   endif
 #elif defined(_AIX)
 #include <sys/limits.h>
+#elif defined(__MVS__)
+#include <limits.h>
 #else
 #include <sys/syslimits.h>
 #endif
@@ -305,7 +310,7 @@ static bool common_download_file_single(const std::string & url, const std::stri
     // Set the URL, allow to follow http redirection
     curl_easy_setopt(curl.get(), CURLOPT_URL, url.c_str());
     curl_easy_setopt(curl.get(), CURLOPT_FOLLOWLOCATION, 1L);
-
+    curl_easy_setopt(curl.get(), CURLOPT_CAINFO, std::getenv("SSL_CERT_PATH"));
     http_headers.ptr = curl_slist_append(http_headers.ptr, "User-Agent: llama-cpp");
     // Check if hf-token or bearer-token was specified
     if (!bearer_token.empty()) {
@@ -506,7 +511,8 @@ static bool common_download_model(
         struct gguf_init_params gguf_params = {
             /*.no_alloc = */ true,
             /*.ctx      = */ NULL,
-        };
+            /* .allow_byteswapping = */ true,
+	};
         auto * ctx_gguf = gguf_init_from_file(model.path.c_str(), gguf_params);
         if (!ctx_gguf) {
             LOG_ERR("\n%s:  failed to load input GGUF from %s\n", __func__, model.path.c_str());
@@ -569,6 +575,7 @@ std::pair<long, std::vector<char>> common_remote_get_content(const std::string &
     curl_easy_setopt(curl.get(), CURLOPT_URL, url.c_str());
     curl_easy_setopt(curl.get(), CURLOPT_NOPROGRESS, 1L);
     curl_easy_setopt(curl.get(), CURLOPT_FOLLOWLOCATION, 1L);
+    curl_easy_setopt(curl.get(), CURLOPT_CAINFO, std::getenv("SSL_CERT_PATH"));
     typedef size_t(*CURLOPT_WRITEFUNCTION_PTR)(void * ptr, size_t size, size_t nmemb, void * data);
     auto write_callback = [](void * ptr, size_t size, size_t nmemb, void * data) -> size_t {
         auto data_vec = static_cast<std::vector<char> *>(data);
